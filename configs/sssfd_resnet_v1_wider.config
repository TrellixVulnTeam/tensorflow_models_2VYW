# SSSFDD with Mobilenet v2 configuration for FDDB Dataset.
# Users should configure the fine_tune_checkpoint field in the train config as
# well as the label_map_path and input_path fields in the train_input_reader and
# eval_input_reader. Search for "PATH_TO_BE_CONFIGURED" to find the fields that
# should be configured.

model {
  sssfd {
    num_classes: 1
    encode_background_as_zeros: true
    box_coder {
      faster_rcnn_box_coder {
        y_scale: 10.0
        x_scale: 10.0
        height_scale: 5.0
        width_scale: 5.0
      }
    }
    matcher {
      argmax_matcher_sssfd {
        matched_threshold: 0.35
        unmatched_threshold: 0.35
        ignore_thresholds: false
        negatives_lower_than_unmatched: true
        force_match_for_each_row: false
        minimum_anchor_num: 6
        minimum_threshold: 0.1
      }
    }
    similarity_calculator {
      iou_similarity {
      }
    }

    anchor_generator {
      multiscale_anchor_generator {
        min_level: 3
        max_level: 7
        anchor_scale: 4.0
        aspect_ratios: 1.0
        scales_per_octave: 2
      }
    }

    image_resizer {
      fixed_shape_resizer {
        height: 640
        width: 640
      }
    }
    box_predictor {
      weight_shared_convolutional_box_predictor {
        conv_hyperparams {
          regularizer {
            l2_regularizer {
              weight: 0.000399999989895
            }
          }
          initializer {
            random_normal_initializer {
              mean: 0.0
              stddev: 0.00999999977648
            }
          }
          activation: RELU_6
          batch_norm {
            decay: 0.996999979019
            scale: true
            epsilon: 0.0010000000475
          }
        }
        depth: 256
        num_layers_before_predictor: 4
        kernel_size: 3
        class_prediction_bias_init: -4.59999990463
      }
    }

    feature_extractor {
      type: 'sssfd_resnet_v1_50'
      min_depth: 16
      depth_multiplier: 1.0
      conv_hyperparams {
        activation: RELU_6,
        regularizer {
          l2_regularizer {
            weight: 0.00004
          }
        }
        initializer {
          truncated_normal_initializer {
            stddev: 0.03
            mean: 0.0
          }
        }
        batch_norm {
          train: true,
          scale: true,
          center: true,
          decay: 0.9997,
          epsilon: 0.001,
        }
      }
    }



    loss {
      classification_loss {
        weighted_sigmoid {
        }
      }
      localization_loss {
        weighted_smooth_l1 {
        }
      }
      hard_example_miner {
        num_hard_examples: 3000
        iou_threshold: 0.99
        loss_type: CLASSIFICATION
        max_negatives_per_positive: 3
        min_negatives_per_image: 3
      }
      classification_weight: 1.0
      localization_weight: 1.0
    }
    normalize_loss_by_num_matches: true
    post_processing {
      batch_non_max_suppression {
        score_threshold: 1e-8
        iou_threshold: 0.6
        max_detections_per_class: 100
        max_total_detections: 100
      }
      score_converter: SIGMOID
    }
  }
}

train_config: {
  batch_size: 12
  optimizer {
    rms_prop_optimizer: {
      learning_rate: {
        exponential_decay_learning_rate {
          initial_learning_rate: 0.004
          decay_steps: 2000
          decay_factor: 0.95
        }
      }
      momentum_optimizer_value: 0.9
      decay: 0.9
      epsilon: 1.0
    }
  }
  fine_tune_checkpoint: "./data/ssd_resnet50_v1_coco_2018_07_03/model.ckpt"
  fine_tune_checkpoint_type: "detection"
  from_detection_checkpoint: true
  # Note: The below line limits the training process to 200K steps, which we
  # empirically found to be sufficient enough to train the pets dataset. This
  # effectively bypasses the learning rate schedule (the learning rate will
  # never decay). Remove the below line to train indefinitely.
  # num_steps: 200000
  data_augmentation_options {
    random_horizontal_flip {
    }
  }
  data_augmentation_options { #TODO: maintain aspect ratio of original image, square crop -> bloat the cropped size to 640, 640
  #TODO: According to the paper, color distort was applied in training;random_horizontal_flip; random crop
    ssd_random_crop_fixed_aspect_ratio {
        aspect_ratio: 1.0
    }
  }
  data_augmentation_options {
    random_distort_color {
      color_ordering: 0
    }

  }
  data_augmentation_options {
    random_image_scale {
    }
  }

}

train_input_reader: {
  tf_record_input_reader {
    input_path: "./data/wider_train.record"
  }
  label_map_path: "./data/label_map.pbtxt"
}

eval_config: {
  num_examples: 280
  # Note: The below line limits the evaluation process to 10 evaluations.
  # Remove the below line to evaluate indefinitely.
  max_evals: 50
  eval_interval_secs: 0
  metrics_set: "fddb_detection_metrics" #coco_detection_metrics, coco_mask_metrics, fddb_detection_metrics, pascal_voc_detection_metrics, .........
  save_graph: True
  visualization_export_dir: "./evalsamples/"
  visualize_groundtruth_boxes: True
  include_metrics_per_category: True
}

eval_input_reader: {
  tf_record_input_reader {
    input_path: "./data/wider_valid.record"
  }
  label_map_path: "./data/label_map.pbtxt"
  shuffle: true
  num_readers: 1
}

